name: E2E Tests (iOS + Android)

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  e2e-tests-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      env:
        NODE_AUTH_TOKEN: ${{ secrets.MUSIC_NOTATION_SECRET_KEY }}
      run: |
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.MUSIC_NOTATION_SECRET_KEY }}" > ~/.npmrc
        echo "@leonkwan46:registry=https://npm.pkg.github.com" >> ~/.npmrc
        npm ci
        
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Setup Maestro
      uses: dniHze/maestro-test-action@v1
      with:
        version: 1.33.1  # Pin version for stability (avoiding 1.35.x issues)
        
    - name: Setup Expo
      run: |
        npx expo install --fix
        
    - name: Create and Start iOS Simulator
      run: |
        # List available simulators and iOS versions for debugging
        echo "Available simulators:"
        xcrun simctl list devicetypes | grep iPhone
        
        echo "Available iOS runtimes:"
        xcrun simctl list runtimes | grep iOS
        
        # Try to create iPhone 16 with available iOS runtimes (using full runtime identifiers)
        echo "Creating iOS simulator..."
        xcrun simctl create "maestro-ios-test" "iPhone 16" "com.apple.CoreSimulator.SimRuntime.iOS-18-4" || \
        xcrun simctl create "maestro-ios-test" "iPhone 16" "com.apple.CoreSimulator.SimRuntime.iOS-18-5" || \
        xcrun simctl create "maestro-ios-test" "iPhone 16" "com.apple.CoreSimulator.SimRuntime.iOS-18-6" || \
        xcrun simctl create "maestro-ios-test" "iPhone 15" "com.apple.CoreSimulator.SimRuntime.iOS-18-4" || \
        xcrun simctl create "maestro-ios-test" "iPhone 14" "com.apple.CoreSimulator.SimRuntime.iOS-18-4" || \
        echo "Using existing simulator or creating with default settings"
        
        # Find the simulator by name and get its UDID, or use any available iPhone
        DEVICE_ID=$(xcrun simctl list devices available --json | jq -r '.devices[] | .[] | select(.name == "maestro-ios-test") | .udid' | head -n 1)
        
        # If our custom simulator wasn't created, use any available iPhone 16 or 15
        if [ -z "$DEVICE_ID" ]; then
          echo "Custom simulator not found, using any available iPhone..."
          DEVICE_ID=$(xcrun simctl list devices available --json | jq -r '.devices[] | .[] | select(.name | contains("iPhone 16") or contains("iPhone 15")) | .udid' | head -n 1)
        fi
        
        if [ -z "$DEVICE_ID" ]; then
          echo "No suitable iPhone simulator found"
          exit 1
        fi
        
        DEVICE_STATE=$(xcrun simctl list devices available --json | jq -r --arg DEVICE_ID "$DEVICE_ID" '.devices[] | .[] | select(.udid == $DEVICE_ID) | .state')
        
        echo "Found simulator with DEVICE_ID=$DEVICE_ID"
        echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
        
        if [ "$DEVICE_STATE" != "Booted" ]; then
          echo "Booting simulator..."
          xcrun simctl boot "$DEVICE_ID"
          # Wait for simulator to boot
          sleep 30
        else
          echo "Simulator is already booted"
        fi
        
        # List all devices to verify
        echo "Available devices:"
        xcrun simctl list devices
      timeout-minutes: 10
        
    - name: Build and install iOS app
      run: |
        # Wait for simulator to be fully ready
        sleep 10
        
        # List available simulators for debugging
        echo "Available simulators:"
        xcrun simctl list devices | grep "maestro-ios-test"
        
        # Build and install the app
        echo "Building and installing iOS app..."
        npx expo run:ios --device $DEVICE_ID --no-build-cache
        
        # Wait for app to install and launch
        sleep 15
        echo "iOS app installation complete"
      timeout-minutes: 30
        
    - name: Verify iOS setup
      run: |
        # Check if simulator is running
        xcrun simctl list devices | grep "maestro-ios-test" | grep "Booted"
        
        # Check if app is installed
        xcrun simctl listapps "maestro-ios-test" | grep "Tonale" || echo "App may still be installing..."
        
    - name: Run iOS E2E tests
      uses: dniHze/maestro-test-action@v1
      with:
        version: 1.33.1
        flow: tests/e2e/
        report: maestro-results/ios-report.xml
        screenshots-dir: maestro-results/ios-screenshots
        
    - name: Upload iOS test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results-ios
        path: |
          maestro-results/ios-report.xml
          maestro-results/ios-screenshots/
        
  e2e-tests-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      env:
        NODE_AUTH_TOKEN: ${{ secrets.MUSIC_NOTATION_SECRET_KEY }}
      run: |
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.MUSIC_NOTATION_SECRET_KEY }}" > ~/.npmrc
        echo "@leonkwan46:registry=https://npm.pkg.github.com" >> ~/.npmrc
        npm ci
        
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Setup Maestro
      uses: dniHze/maestro-test-action@v1
      with:
        version: 1.33.1  # Pin version for stability (avoiding 1.35.x issues)
        
    - name: Setup Expo
      run: |
        npx expo install --fix
        
    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        
    - name: Run Android E2E tests with emulator
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          # Build and install the app
          echo "Building and installing Android app..."
          # List available devices first
          adb devices
          # Get the device ID from adb
          DEVICE_ID=$(adb devices | grep emulator | awk '{print $1}' | head -n 1)
          echo "Using device: $DEVICE_ID"
          npx expo run:android --device $DEVICE_ID
          
          # Wait for app to install and launch
          sleep 15
          echo "Android app installation complete"
          
          # Run E2E tests using Maestro CLI directly
          echo "Running Android E2E tests..."
          export PATH="$PATH:$HOME/.maestro/bin"
          maestro test --format=junit --output=maestro-results/android-report.xml --no-ansi tests/e2e/
        
    - name: Upload Android test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results-android
        path: maestro-results/android-report.xml
